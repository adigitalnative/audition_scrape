#!/usr/bin/ruby

ENV['PATH'] = File.realpath(File.expand_path(File.dirname(__FILE__)))+"/phantomjs/bin:"+ENV['PATH']

require "pp"
require "net/http"
require "net/smtp"
require "uri"
require "nokogiri"
require "cgi"
require "etc"
require "trollop"
require 'open-uri'
require 'capybara'
require 'capybara/dsl'
require 'capybara/poltergeist'

def load_capybara
  Capybara.default_driver = :poltergeist
  #Capybara.javascript_driver = :poltergeist
  Capybara.run_server = false
  Capybara.register_driver :poltergeist do |app|
    driver = Capybara::Poltergeist::Driver.new(
      app,
      js_errors: false,
#      debug: true,
      timeout: 120,
      phantomjs: File.realpath(File.expand_path(File.dirname(__FILE__)))+"/phantomjs/bin/phantomjs",
      phantomjs_options: ['--ignore-ssl-errors=yes', '--local-to-remote-url-access=yes', '--load-images=false', '--local-to-remote-url-access=true', '--ssl-protocol=TLSv1.2'] # '--debug=true'
    )
  #  driver.browser.url_whitelist = %w(
  #    backstage.com
  #    www.backstage.com
  #  )
    driver
  end
  
  Capybara.configure do |config|
    config.run_server = false
    config.default_driver = :poltergeist
    config.javascript_driver = :poltergeist
  end
  Capybara.use_default_driver
end

$exitcode = 0

home = Etc.getpwuid(Process.uid).dir
$footer_msg = "-- If they won't invite you in, <a href='http://38.media.tumblr.com/tumblr_lk65pfPql21qzi80do1_500.gif'>kick down the door</a>."
$admin_addr = "stange@johnstange.net"
$recips = [$admin_addr]
if File.exists?("#{home}/.audition_recips")
  File.open("#{home}/.audition_recips", "r").each_line { |line|
    $recips << line.chomp if line.match(/@/)
  }
end

$opts = Trollop::options do
  banner <<-EOS
Usage:
#{$0} [-a] [-t]
  EOS
  opt :all, "Show all harvested notices, instead of just new ones.", :require => false, :default => false, :type => :boolean
  opt :test, "Send results to admin address only, and don't save cache.", :require => false, :default => false, :type => :boolean
end

if $opts[:test]
  $recips = [$admin_addr]
end

if File.exists?("#{home}/.notice_cache")
  $notices = Marshal.load(File.read("#{home}/.notice_cache"))
else
  $notices = {}
end

$runtime = Time.new

def formpost(uri, params)
  response = Net::HTTP.post_form(uri, params)
  if response.code == "302"
    return Net::HTTP.get(URI.parse(response['location']))
  elsif response.code == "200"
    return response.body
  else
    puts "Error formposting #{uri.to_s}: #{response.inspect}"
  end
  return nil
end

def scrape_playbill
  ["MD", "DC", "VA"].each { |state|
    uri = URI.parse("http://www.playbill.com/job/listing")
    uri.query = "q=&category=Performer&state=#{state}&paid=on&union=&intern="
    body = Net::HTTP.get_response(uri).body
    html_doc = Nokogiri::HTML(body)
    html_doc.css("div.event-listing-table div.pb-tile-wrapper").each { |listing|
      (listing.css("a")).each { |chunk|
        namestr = "Playbill - "+CGI.unescapeHTML(chunk.css("div.pb-tile-title").children.first.to_s.strip)
        $notices[namestr] ||= {}
        $notices[namestr]['url'] = "http://www.playbill.com"+chunk.attributes["href"].to_s
        $notices[namestr]['firstseen'] ||= $runtime
        $notices[namestr]['lastseen'] = $runtime
      }
    }
  }
end

def scrape_backstage
  oldstderr = $stderr.clone
  $stderr.reopen("/dev/null", "w")
  include Capybara::DSL
  load_capybara
  $stderr = oldstderr
#  Capybara.reset_sessions!
  uri = URI.parse("https://www.backstage.com/casting/")
  uri.query = "compensation=true&exclude_nationwide=true&gender=B&geo=-77.0368707%2C38.9071923&location=Washington%2C+DC%2C+USA&max_age=100&min_age=0&page=1&pt=60&pt=69&pt=70&radius=50&sort_by=newest"

  html_doc = nil
  begin
    visit(uri.to_s)
    html_doc = Nokogiri::HTML(page.html)
  rescue Capybara::Poltergeist::StatusFailError => e
    puts e.message
    $exitcode = 1
    return
  end

  html_doc.css("h3.prod__title > a").each { |listing|
    namestr = "Backstage - "+CGI.unescapeHTML(listing.children.first.to_s)
    $notices[namestr] ||= {}
    $notices[namestr]['url'] = "https://www.backstage.com"+listing.attributes["href"].to_s
    $notices[namestr]['firstseen'] ||= $runtime
    $notices[namestr]['lastseen'] = $runtime
  }
end

scrape_playbill
scrape_backstage

# Scrub anything that no longer shows up
deletia = []
$notices.each_pair { |name, data|
  stamp = (data['lastseen'] || data['firstseen'] || 0)
  if stamp < $runtime
    deletia << name
  end
}
deletia.each { |defunct|
  $notices.delete(defunct)
}

if !$opts[:test]
  File.open("#{home}/.notice_cache", 'w') { |file|
    file.write Marshal.dump($notices)
  }
end

msg_body = ""
if $opts[:all]
  msg_body = msg_body + "<p>Here's a recap of everything I've harvested lately!</p>"
end
keys = $notices.each_key.sort { |a, b|
  if $notices[a]['firstseen'] == $notices[b]['firstseen']
    val = a <=> b
  else
    val = $notices[b]['firstseen'] <=> $notices[a]['firstseen']
  end
}
count = 0

keys.each { |name|
  data = $notices[name]
  next if !$opts[:all] and data['firstseen'] != $runtime
  count = count + 1
  msg_body = msg_body + "<p>"
  if data['firstseen'].to_s == $runtime.to_s
    msg_body = msg_body + "NEW: "
  end
  msg_body = msg_body + "<a href='#{data['url']}'>#{name}</a></p>\n"
}
exit 0 if count == 0

message = <<MESSAGE_END
From: #{$admin_addr}
To: #{$admin_addr}
MIME-Version: 1.0
Subject: Wack-Ass Equity Audition Postings
Content-type: text/html


#{msg_body}

#{$footer_msg}
MESSAGE_END

Net::SMTP.start('localhost') { |smtp|
  smtp.send_message message, $admin_addr, $recips
}
exit $exitcode
